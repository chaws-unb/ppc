
                   [1mAplica√ß√µes de Backtracking[0m


[4mPermuta√ß√µes[0m

  ‚Üí A listagem de todas as n! permuta√ß√µes de n elementos pode ser
  feita atrav√©s do uso do backtracking

  ‚Üí O cuidado a ser tomado √© que os candidatos poss√≠veis, em cada
  passo do algoritmo, dependem do estado da solu√ß√£o a

  ‚Üí Em nota√ß√£o de backtracking, S_k = {1, 2, ..., n} ‚Äê a

  ‚Üí a ser√° uma solu√ß√£o se k == n

    ¬∑ C√≥digo: permutations.c

‚Üí  Observe  que  as permuta√ß√µes s√£o listadas em ordem lexogr√°fica
(isto √©, em ordem ascendente)

[4mO[24m [4mproblema[24m [4mdas[24m [4moito[24m [4mrainhas[0m

  ‚Üí O problema consiste em posicionar 8 rainhas em  um  tabuleiro
  de xadrez, de modo que nenhuma delas amea√ße as outras

  ‚Üí  O problema pode ser extendido para n rainhas em um tabuleiro
  n x n

  ‚Üí O caso n = 2 n√£o tem solu√ß√£o, assim como o  caso  n  =  3.  O
  primeiro valor de n que surgem solu√ß√µes √© 4

  ‚Üí  A  implementa√ß√£o  do  backtracking  exige a representa√ß√£o da
  solu√ß√£o como um vetor, de maneira precisa e eficiente

  ‚Üí Um vetor com n^2, onde verdadeiro ou falso indicam a presen√ßa
  de uma rainha em uma determinada casa n√£o √© muito concisa, pois
  apenas n ser√£o verdadeiro numa solu√ß√£o

  ‚Üí Al√©m disso, s√£o 2^64 ~= 1.84 x 10^19 vetores verdadeiro/falso
  em um tabuleiro 8 x 8, um n√∫mero deveras grande, tornam imprat‚Äê
  ic√°vel a verifica√ß√£o de todas (ou de grande parte)

  ‚Üí Por outro lado, se a √© um vetor cuja entrada a_i √© um  n√∫mero
  entre  1  e  n^2  que  representa  as  coordenadas das rainhas,
  haver√£o 64^8 = 2.81 x 10^14 solu√ß√µes  poss√≠veis.  Embora  sejam
  menos solu√ß√µes do que a abordagem anterior, ainda assim estamos
  muito acima da ordem de um milh√£o (10^6)

  ‚Üí Para tornar o backtracking  poss√≠vel,  √©  preciso  "podar"  a
  maioria destas solu√ß√µes antes mesmo de constru√≠‚Äêlas

[4m"Podando"[24m [4ma[24m [4mbusca[0m

  ‚Üí  A explos√£o combinat√≥rio implica que o espa√ßo de busca cresce
  exponencialmente a medida que n  cresce.  Isto  torna  invi√°vel
  problemas mesmo com um valor pequeno para n

  ‚Üí Para tornar o backtracking vi√°vel, √© preciso "podar" o espa√ßo
  de busca, terminando imediatamente  qualquer  busca  assim  que
  fique claro que ela n√£o poder√° resultar em uma solu√ß√£o

  ‚Üí  O  termo  "podar" vem da analogia das chamadas recursivas do
  backtracking com uma √°rvore

  ‚Üí Voltando ao problema das 8 rainhas, a primeira  coisa  a  ser
  removida  s√£o  as simetrias, pois as damas s√£o todas id√™nticas.
  Se n√£o removidas, cada  simetria  gera  8!  =  40.320  solu√ß√µes
  sim√©tricas

  ‚Üí  Para  remover  as  simetrias, basta considerar que a dama da
  posi√ß√£o a_k est√° em uma casa de n√∫mero  maior  do  que  a  dama
  a_{k‚Äê1}

  ‚Üí  Removidas  as  simetrias, o n√∫mero de elementos do espa√ßo de
  busca √© reduzido para C64,8 = 4.426 x 10^9

  ‚Üí Como pode haver apenas uma rainha por linha, a  representa√ß√£o
  pode ser simplificada uma vez mais, armazenando apenas o n√∫mero
  da coluna que a dama da linha i ocupa. O novo espa√ßo  de  busca
  ser√° 8^8 = 1.677 x 10^7

  ‚Üí  O  mesmo vale para as colunas: cada rainha deve estar em uma
  coluna distintas, de modo que cada solu√ß√£o dever√° ser uma  per‚Äê
  muta√ß√£o  de  8 elementos.  Logo o espa√ßo de busca ser√° reduzido
  para 8! = 40.320

  ‚Üí Agora, os candidados ser√£o as colunas de uma dada  linha  que
  n√£o est√£o amea√ßados pelas damas j√° posicionadas

    ¬∑ C√≥digo: 8‚Äêqueens.c









































